

global:
  storageClass: 
  # Will be used by this and all subcharts
  accessMode: ReadWriteMany

#####################
# STS CONFIGURATION #
#####################

# CONFIGURATION FOR GEONODE DEPLOYMENT
geonode:
  persistant:
    storageSize: 2Gi
  image:
    name: zalf/geonode
    tag: '4.x'
  
  ingress:
    enabled: True
    ingressClassName:
    externalScheme: http
    externalDomain: geonode
    externalPort: 80
  
  general:
    max_document_size: 10
    api_limit_per_page: 1000
    debug: False
    superUser:
      password: geonode
      email: support@example.com

  mail:
    enabled: False
    backend: "django.core.mail.backends.smtp.EmailBackend"
    host: smtp.gmail.com
    port: '587'
    tls: true
    use_ssl: False
    user: "changeme"
    password: "changeme"
    from: "changeme@web.de"
  # TODO add haystack chart
  haystack:
    enabled: False
    engine_url: http://elasticsearch:9200/
    engine_index_name: haystack
    search_results_per_page: '200'
  # TODO add memcached chart
  memcached:
    enabled: False
    lock_expire: '3600'
    lock_timeout: '10'
  
  monitoring:
    enabled: False
    data_tls: 365
    user_analytics_enabled: True
    user_analytics_gzip: True
    centralized_dashboard_enabled: False
  celery:
    enabled: False

  # TODO (mwall) rethink this part
  extraConf: |
    EXTRA_BASE_LAYERS = [
      {
        "type": "tileprovider",
        "title": "OpenStreetMap Terrain",
        "thumbURL": "https://a.tile-cyclosm.openstreetmap.fr/cyclosm/10/594/518.png",
        "provider": "custom",
        "name": "cyclosm",
        "group": "background",
        "visibility": False,
        "url": "https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png",
        "options": {
          "subdomains": [ "a", "b", "c" ]
        }
      },
      {
        "type": "tileprovider",
        "title": "OpenStreetMap B&W",
        "thumbURL": "https://tiles.wmflabs.org/bw-mapnik/0/0/0.png",
        "provider": "OpenStreetMap.BlackAndWhite",
        "name": "osmbw",
        "group": "background",
        "visibility": False
      },
      {
        "type": "tileprovider",
        "title": "CartoDB Light",
        "thumbURL": "https://a.basemaps.cartocdn.com/light_all/0/0/0.png",
        "provider": "CartoDB.Positron",
        "name": "cartol",
        "group": "background",
        "visibility": False
      },
      {
        "type": "tileprovider",
        "title": "Stamen Watercolor",
        "provider": "Stamen.Watercolor",
        "name": "Stamen.Watercolor",
        "source": "Stamen",
        "group": "background",
        "thumbURL": "https://stamen-tiles-c.a.ssl.fastly.net/watercolor/0/0/0.jpg",
        "visibility": False
      }
    ]

    MAPSTORE_BASELAYERS =  EXTRA_BASE_LAYERS + MAPSTORE_BASELAYERS
  extraConf2: |
    # Add Google provider
    SOCIALACCOUNT_PROVIDERS['google'] = {
      'SCOPE': [
        'profile',
        'email',
      ],
      'AUTH_PARAMS': {
        'access_type': 'online',
      }
    }

    if os.getenv('AUTH_DOMAIN'):
      SOCIALACCOUNT_PROVIDERS['google']['AUTH_PARAMS']['hd'] = os.getenv('AUTH_DOMAIN')

    INSTALLED_APPS += ('allauth.socialaccount.providers.google',)
    SOCIALACCOUNT_PROFILE_EXTRACTORS['google'] = "geonode.people.profileextractors.OpenIDExtractor"


# CONFIGURATION FOR GEOSERVER DEPLOYMENT
geoserver:
  image:
    name: zalf/geoserver
    tag: '2.19.6' 
  
  admin_password: "geoserver"
  # A list of one-line custom EPSGs to add to GeoServer
  # see https://docs.geoserver.org/stable/en/user/configuration/crshandling/customcrs.html
  customEPSGs:
    - 1=PROJCS["TM_Rwanda",GEOGCS["GCS_ITRF_2005",DATUM["D_ITRF_2005",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",5000000.0],PARAMETER["Central_Meridian",30.0],PARAMETER["Scale_Factor",0.9999],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]
  extraCustomEPSGs: []


# CONFIGURATION FOR NGINX DEPLOYMENT
# MAY MOVE TO CHART
nginx:
  serviceType: LoadBalancer
  replicas: 1
  image:
    name: nginx
    tag: '1.20'

########################
# CHART CONFIGURATIONS #
########################

# VALUES DEFINITION: https://github.com/zalando/postgres-operator/blob/master/charts/postgres-operator/values.yaml

# TODO (mwall) make all configurations available in manifest
postgres-operator:
  operatorApiUrl: "http://{{ .Release.Name }}-postgres-operator:8080"
  enabled: true
  configLoggingRestApi:
  # REST API listener listens to this port
  api_port: 8080
  storageSize: 3Gi
  storageClass: 
  numberOfInstances: 1

# VALUES DEFINITION: https://github.com/zalando/postgres-operator/blob/master/charts/postgres-operator-ui/values.yaml
postgres-operator-ui:
  enabled: true

  # replicaCount tested and not working ...
  replicaCount: 1
  envs:
  operatorApiUrl: "http://{{ $.Release.Name }}-postgres-operator:8080"

  service:
    type: LoadBalancer
    port: 80
  
  ingress:
    enabled: False
    ingressClassName: nginx
    hosts:
      - host: postgres-ui
        paths: [""]

# VALUES DEFINITION https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
postgresql:
  enabled: False
  
  # The usernames will be the same as the database names
  geonodeDb: geonode
  geodataDb: geonode_data
  password: # PLS SET IF ACTICATED 

  # TODO: support external db
  # For now we only support a db installed with a subchart

  # Standard postgres chart values
  # See https://artifacthub.io/packages/helm/bitnami/postgresql for docs
  # Override this!
  postgresqlPassword: admin
  initdbScriptsSecret: '{{ .Release.Name }}-postgres-init'


# VALUES DEFINITION https://github.com/bitnami/charts/blob/master/bitnami/rabbitmq/values.yaml
rabbitmq:
  enabled: true
  auth:
    username: rabbituser
    password: # PLS SET
    erlangCookie: jixYBsiZ9RivaLXC02pTwGjvIo0nHtVu
  persistence:
    enabled:  False
