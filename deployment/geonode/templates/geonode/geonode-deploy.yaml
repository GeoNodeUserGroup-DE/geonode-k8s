# geonode stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "geonode_container_name" . }}"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      org.geonode.instance: "{{ include "geonode_container_name" . }}"
  serviceName: "{{ include "geonode_container_name" . }}"
  replicas: {{ .Values.geonode.replicaCount }}
  template:
    metadata:
      labels:
        org.geonode.instance: "{{ include "geonode_container_name" . }}"
    spec:
      terminationGracePeriodSeconds: 3
      initContainers:
      # Wait for Postgres and rabbit
      - name: geonode-wait-for-db-and-rabbit
        image: jwilder/dockerize
        imagePullPolicy: IfNotPresent
        args:
        - -timeout=120s
        - -wait
        - tcp://{{ include "postgres_container_name" . }}:{{ include "database_port" .}}
        - -wait
        - tcp://{{ include "rabbit_host" .}}
      containers:
      # This is the django app server
      - name: geonode
        image: "{{ .Values.geonode.image.name }}:{{ .Values.geonode.image.tag }}"
        command:
        - bash
        - -c
        - |
          # install dockerize...
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

          # Add config overrides
          cat /usr/src/geonode/geonode/local_settings.py >> /usr/src/geonode/geonode/settings.py

          # Setup
          touch /usr/src/geonode/invoke.log
          dockerize -stdout /usr/src/geonode/invoke.log /usr/src/geonode/entrypoint.sh

          # Run web server
          touch /var/log/geonode.log
          dockerize -stdout /var/log/geonode.log /usr/local/bin/uwsgi --ini /usr/src/geonode/uwsgi.ini
        ports:
        - containerPort: 8000
        # - containerPort: 8001
        envFrom:
          - configMapRef:
              name: {{ include "geonode_container_name" . }}-env
        env:
        ##########################
        # DATABASE CONFIGURATION #
        ##########################

        # HOST CONFIGURATION
        - name: DATABASE_HOST
          value: "{{ include "postgres_container_name" . }}"
        - name: DATABASE_PORT
          value: "{{ include "database_port" .}}"

        # patroni login credentials from
        # {username}.{team}-{clustername}.credentials.postgresql.acid.zalan.do

        # geonode user password
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name:  {{ .Values.postgres.geonodedatabase }}.{{ include "postgres_container_name" . }}.credentials.postgresql.acid.zalan.do
              key: password

        # geogeodatabase password
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.geodatabasename }}.{{ include "postgres_container_name" . }}.credentials.postgresql.acid.zalan.do
              key: password

        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.username }}.{{ include "postgres_container_name" . }}.credentials.postgresql.acid.zalan.do
              key: password

        - name: POSTGRES_USER
          value: {{ .Values.postgres.username }}

        - name: GEONODE_DATABASE
          value: {{ .Values.postgres.geonodedatabase | quote }}

        - name: GEONODE_GEODATABASE
          value: {{ .Values.postgres.geodatabasename | quote }}

        - name: GEONODE_DATABASE_SCHEMA
          value: {{ .Values.postgres.schema }}

        - name: GEONODE_GEODATABASE_SCHEMA
          value: {{ .Values.postgres.schema }}

        - name: GEODATABASE_URL
          value: "postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)"

        - name: DATABASE_URL
          value: "postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)"

        volumeMounts:
        - name: persistence
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: persistence
          mountPath: /backup_restore
          subPath: backup-restore
        - name: persistence
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        # geonode-k8s updated task-py
        - name: task-py
          mountPath: "/usr/src/geonode/tasks.py"
          subPath: tasks.py
          readOnly: true
        resources:
          requests:
            memory: {{ .Values.geonode.resources.requests.memory }}
            cpu: {{ .Values.geonode.resources.requests.cpu }}

      # Celery is the task worker
      {{ if (eq .Values.geonode.celery.enabled true) }}

      - name: {{ include "geonode_container_name" . }}-celery
        image: "{{ .Values.geonode.image.name }}:{{ .Values.geonode.image.tag }}"
        envFrom:
          - configMapRef:
            name: {{ include "geonode_container_name" . }}-env
        env:
        - name: IS_CELERY
          value: 'True'
        command:
        - bash
        - -c
        - |
          # install dockerize...
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

          # Add host alias since the scripts hardcode the db host as 'db' @##@?
          # echo "db {{ .Release.Name }}-postgresql" > /etc/host.aliases
          # export HOSTALIASES=/etc/host.aliases

          # Setup
          touch /usr/src/app/invoke.log
          dockerize -stdout /usr/src/app/invoke.log /usr/src/app/entrypoint.sh

          # Run celery
          celery -A geonode.celery_app:app worker -B -E --statedb=/mnt/volumes/statics/worker.state -s /mnt/volumes/statics/celerybeat-schedule --loglevel=INFO --concurrency=10 -n worker1@%h
        volumeMounts:
        - name: persistence
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: persistence
          mountPath: /backup_restore
          subPath: backup-restore
        - name: persistence
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        ports:
        - containerPort: 5555

        {{ end }}

      volumes:
      - name: persistence
        persistentVolumeClaim:
          claimName: pvc-{{ .Release.Name }}-geonode
      - name: task-py
        configMap:
          name: {{ .Release.Name }}-geonode-tasks-py
          items:
          - key: tasks.py
            path: "tasks.py"
      # Using an emptyDir to cache compiled statics... it will survive container crashes, but not pod restarts
      - name: cache-volume
        emptyDir: {}
